/**********************************************************************
 * file:  sr_router.c
 * date:  Mon Feb 18 12:50:42 PST 2002
 * Contact: casado@stanford.edu
 *
 * Description:
 *
 * This file contains all the functions that interact directly
 * with the routing table, as well as the main entry method
 * for routing.
 *
 **********************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>


#include "sr_if.h"
#include "sr_rt.h"
#include "sr_router.h"
#include "sr_protocol.h"
#include "sr_arpcache.h"
#include "sr_utils.h"

/*---------------------------------------------------------------------
 * Method: sr_init(void)
 * Scope:  Global
 *
 * Initialize the routing subsystem
 *
 *---------------------------------------------------------------------*/

void sr_init(struct sr_instance* sr)
{
  /* REQUIRES */
  assert(sr);

  /* Initialize cache and cache cleanup thread */
  sr_arpcache_init(&(sr->cache));

  pthread_attr_init(&(sr->attr));
  pthread_attr_setdetachstate(&(sr->attr), PTHREAD_CREATE_JOINABLE);
  pthread_attr_setscope(&(sr->attr), PTHREAD_SCOPE_SYSTEM);
  pthread_attr_setscope(&(sr->attr), PTHREAD_SCOPE_SYSTEM);
  pthread_t thread;

  pthread_create(&thread, &(sr->attr), sr_arpcache_timeout, sr);

  /* Add initialization code here! */



} /* -- sr_init -- */



/*---------------------------------------------------------------------
 * Method: sr_handlepacket(uint8_t* p,char* interface)
 * Scope:  Global
 *
 * This method is called each time the router receives a packet on the
 * interface.  The packet buffer, the packet length and the receiving
 * interface are passed in as parameters. The packet is complete with
 * ethernet headers.
 *
 * Note: Both the packet buffer and the character's memory are handled
 * by sr_vns_comm.c that means do NOT delete either.  Make a copy of the
 * packet instead if you intend to keep it around beyond the scope of
 * the method call.
 *
 *---------------------------------------------------------------------*/
void sr_handlepacket(struct sr_instance* sr,
        uint8_t * packet/* lent */,
        unsigned int len,
        char* interface/* lent */)
{
  /* REQUIRES */
  assert(sr);
  assert(packet);
  assert(interface);

  printf("*** -> Received packet of length %d \n",len);
  //fprintf(stderr, "original_ehdr.\n");
  //print_hdr_eth(packet);    // DEBUG: print out ethernet head
  struct  sr_ethernet_hdr* ehdr = (struct sr_ethernet_hdr *)packet;
  struct  sr_arp_hdr*      ahdr = (struct sr_arp_hdr*)(packet + sizeof(struct sr_ethernet_hdr));
  struct  sr_ip_hdr*       iphdr = (struct sr_ip_hdr*)(packet + sizeof(struct sr_ethernet_hdr));
  struct  sr_if* iface = sr_get_interface(sr, interface);
  int minlength = sizeof(sr_ethernet_hdr_t);
  uint16_t r_cksum = 0, cksum_tmp = 0;
  if (len < minlength) {
    fprintf(stderr, "Failed to print ETHERNET header, insufficient length\n");
    return;
  }

  if(ehdr->ether_type == htons(ethertype_ip)) { //IP

      //Check the minlength and the cksum
      minlength += sizeof(sr_ip_hdr_t);
      if (len < minlength) {
        fprintf(stderr, "Failed to print IP header, insufficient length\n");
        return;
      }
      r_cksum = iphdr->ip_sum;
      cksum_tmp = 0;
      iphdr->ip_sum = htons(0);
      cksum_tmp = cksum(iphdr, sizeof(struct sr_ip_hdr));
      // print_hdr_ip((uint8_t*)iphdr);  //DEBUG
      // fprintf(stderr, "iphdr_sum: %d, new_cksum: %d\n", r_cksum, cksum_tmp); //DEBUG
      if (r_cksum != cksum_tmp){
        fprintf(stderr, "ERROR: data packet error detected, ip packet cksum incorrect.\n");
        return;
      }
      
      if(iphdr->ip_dst == iface->ip){  // IP (target router) 
        uint8_t ip_proto = ip_protocol(packet + sizeof(sr_ethernet_hdr_t));        
        if(ip_proto == ip_protocol_icmp) { // ICMP
          struct  sr_icmp_hdr*     icmphdr = (struct sr_icmp_hdr*)(packet + sizeof(struct sr_ethernet_hdr) + sizeof(struct sr_ip_hdr));
          uint16_t r_cksum = 0, cksum_tmp = 0;
          r_cksum = icmphdr->icmp_sum;
          icmphdr->icmp_sum = htons(0);
          unsigned int icmp_len = len - sizeof(struct sr_ethernet_hdr) - sizeof(struct sr_ip_hdr);
          cksum_tmp = cksum(icmphdr, icmp_len);
          if (r_cksum != cksum_tmp){
            fprintf(stderr, "ERROR: data packet error detected, icmp packet cksum incorrect.\n");
            return;
          }

          sr_handlepacket_icmp(sr, packet, len, interface);
        }
      }else{  // IP Forwarding
        // sr_handlepacket_forwarding(sr, packet, len, interface);
      }
  }
  if((ehdr->ether_type == htons(ethertype_arp)) &&
    (ahdr->ar_op   == htons(arp_op_request))   &&
    (ahdr->ar_tip  == iface->ip ) ) {  // ARP
        sr_handlepacket_arp(sr, packet, len, interface);
  }
}

struct sr_ethernet_hdr* create_eth_hdr(struct sr_ethernet_hdr* ehdr, uint8_t* shost, uint8_t* dhost, uint16_t type){
  struct sr_ethernet_hdr* reply_ehdr = 0;
  reply_ehdr = (struct sr_ethernet_hdr*) malloc(sizeof(struct sr_ethernet_hdr));
  memcpy(reply_ehdr, ehdr, sizeof(struct sr_ethernet_hdr));
  if(dhost){
    memcpy(reply_ehdr->ether_dhost, (uint8_t*)dhost, ETHER_ADDR_LEN*sizeof(uint8_t));
  }
  if(shost){
    memcpy(reply_ehdr->ether_shost, (uint8_t*)shost, ETHER_ADDR_LEN*sizeof(uint8_t));
  }
  if(type){
    reply_ehdr->ether_type = ehdr->ether_type;
  }
  return reply_ehdr;
}

struct sr_ip_hdr* create_ip_hdr(struct sr_ip_hdr* iphdr, uint8_t ip_src, uint8_t ip_dst){
  struct sr_ip_hdr* reply_iphdr = 0;
  reply_iphdr = (struct sr_ip_hdr*) malloc(sizeof(struct sr_ip_hdr));
  memcpy(reply_iphdr, iphdr, sizeof(struct sr_ip_hdr));
  reply_iphdr->ip_src = ip_src ? ip_src : iphdr->ip_src;
  reply_iphdr->ip_dst = ip_dst ? ip_dst : iphdr->ip_dst;
  reply_iphdr->ip_sum = htons(0);
  reply_iphdr->ip_sum = cksum(reply_iphdr, sizeof(struct sr_ip_hdr));
  return reply_iphdr;
}

struct sr_arp_hdr* create_arp_hdr(struct sr_arp_hdr* ahdr, uint16_t ar_op, uint8_t* ar_sha, uint32_t ar_sip, uint8_t* ar_tha, uint32_t ar_tip){
  struct sr_arp_hdr* reply_ahdr = 0;
  reply_ahdr = (struct sr_arp_hdr*) malloc(sizeof(struct sr_arp_hdr)); 
  memcpy(reply_ahdr, ahdr, sizeof(struct sr_arp_hdr));
  reply_ahdr->ar_op = ar_op;
  if (ar_sha){
    memcpy(reply_ahdr->ar_sha, ar_sha, 6);
  }
  reply_ahdr->ar_sip =  ar_sip ? ar_sip : ahdr->ar_sip;
  if (ar_tha){
    memcpy(reply_ahdr->ar_tha, ar_tha, ETHER_ADDR_LEN * sizeof(uint8_t));
  }
  reply_ahdr->ar_tip =  ar_tip ? ar_tip : ahdr->ar_tip;
  return reply_ahdr;
}

struct sr_icmp_hdr* create_icmp_hdr(struct sr_icmp_hdr* icmphdr, uint8_t type, uint8_t code){
  struct sr_icmp_hdr* reply_icmphdr = 0;
  size_t icmp_len = sizeof(struct sr_icmp_hdr);
  reply_icmphdr = malloc(icmp_len);
  memcpy(reply_icmphdr, icmphdr, icmp_len);
  reply_icmphdr->icmp_type = type;
  reply_icmphdr->icmp_code = code;
  reply_icmphdr->icmp_sum = htons(0);
  reply_icmphdr->icmp_sum = cksum(reply_icmphdr, icmp_len);
  return reply_icmphdr;
}

void sr_handlepacket_icmp(struct sr_instance* sr,
        uint8_t * packet/* lent */,
        unsigned int len,
        char* interface/* lent */)
{
  struct  sr_ethernet_hdr* ehdr = (struct sr_ethernet_hdr *)packet;
  struct  sr_ip_hdr*       iphdr = (struct sr_ip_hdr*)(packet + sizeof(struct sr_ethernet_hdr));
  struct  sr_icmp_hdr*     icmphdr = (struct sr_icmp_hdr*)(packet + sizeof(struct sr_ethernet_hdr) + sizeof(struct sr_ip_hdr));
  size_t  icmp_len = len - sizeof(struct sr_ethernet_hdr) - sizeof(struct sr_ip_hdr);  

  uint8_t* reply_pkt = 0;
  struct sr_ethernet_hdr* reply_ehdr = 0;
  struct sr_ip_hdr* reply_iphdr = 0;
  struct sr_icmp_hdr* reply_icmphdr = 0; 
  reply_ehdr = create_eth_hdr(ehdr, ehdr->ether_dhost, ehdr->ether_shost, 0);
  reply_iphdr = create_ip_hdr(iphdr, iphdr->ip_dst, iphdr->ip_src);
  reply_icmphdr = (struct sr_icmp_hdr*) malloc(icmp_len);
  memcpy(reply_icmphdr, icmphdr, icmp_len);
  reply_icmphdr->icmp_type = htons(0);
  reply_icmphdr->icmp_code = htons(0);
  reply_icmphdr->icmp_sum = htons(0);
  reply_icmphdr->icmp_sum = cksum(reply_icmphdr, icmp_len);
  fprintf(stderr, "ICMP_len: %d\n", icmp_len); 
  reply_pkt =  (uint8_t*) malloc(len);
  memcpy(reply_pkt, (uint8_t*) reply_ehdr, sizeof(struct sr_ethernet_hdr));
  memcpy(reply_pkt+sizeof(sr_ethernet_hdr_t), (uint8_t*) reply_iphdr, sizeof(struct sr_ip_hdr));
  memcpy(reply_pkt+sizeof(sr_ethernet_hdr_t)+sizeof(sr_ip_hdr_t), (uint8_t*) reply_icmphdr, icmp_len);
  print_hdr_icmp((uint8_t*)reply_icmphdr); //DEBUG
  sr_send_packet(sr, reply_pkt, len, interface);
  fprintf(stderr, "TOTLE_len: %d\n", len);
  return; 
}

void sr_handlepacket_arp(struct sr_instance* sr,
        uint8_t * packet/* lent */,
        unsigned int len,
        char* interface/* lent */)
{
  struct  sr_ethernet_hdr* ehdr = (struct sr_ethernet_hdr *)packet;
  struct  sr_arp_hdr*      ahdr = (struct sr_arp_hdr*)(packet + sizeof(struct sr_ethernet_hdr));
  struct  sr_if* iface = sr_get_interface(sr, interface); 
  unsigned int lenth = sizeof(struct sr_ethernet_hdr) + sizeof(struct sr_arp_hdr);
  uint8_t* reply_pkt = 0;
  struct sr_ethernet_hdr* reply_ehdr = 0;
  struct sr_arp_hdr* reply_ahdr = 0;
  reply_ehdr = create_eth_hdr(ehdr, (uint8_t*)iface->addr, (uint8_t*)ehdr->ether_shost, 0);
  uint16_t ar_op = htons(arp_op_reply);
  reply_ahdr = create_arp_hdr(ahdr, ar_op, (uint8_t*)iface->addr, ahdr->ar_tip, ahdr->ar_sha, ahdr->ar_tip);
  
  reply_pkt =  (uint8_t*) malloc(len);
  memcpy(reply_pkt, (uint8_t*) reply_ehdr, sizeof(sr_ethernet_hdr_t));
  memcpy(reply_pkt+sizeof(sr_ethernet_hdr_t), (uint8_t*) reply_ahdr, sizeof(sr_arp_hdr_t));
  sr_send_packet(sr, reply_pkt, lenth, interface);
  return;
}


/* end sr_ForwardPacket */







